XML
From Wikipedia, the free encyclopedia
Jump to: navigation, search
Extensible Markup Language
File extension: 	.xml
MIME type: 	application/xml, text/xml (deprecated)
Uniform Type Identifier: 	public.xml
Developed by: 	World Wide Web Consortium
Type of format: 	Markup language
Extended from: 	SGML
Extended to: 	XHTML, RSS, Atom, ...
Standard(s): 	1.0 (Fourth Edition) 1.1 (Second Edition)

The Extensible Markup Language (XML) is a general-purpose markup language.[1] It is classified as an extensible language because it allows its users to define their own tags. Its primary purpose is to facilitate the sharing of data across different information systems, particularly via the Internet.[2]

It is a simplified subset of the Standard Generalized Markup Language (SGML), and is designed to be relatively human-legible. By adding semantic constraints, application languages can be implemented in XML. These include XHTML,[3] RSS, MathML, GraphML, Scalable Vector Graphics, MusicXML, and thousands of others. Moreover, XML is sometimes used as the specification language for such application languages.

XML is recommended by the World Wide Web Consortium. It is a fee-free open standard. The W3C recommendation specifies both the lexical grammar, and the requirements for parsing.
Contents
[hide]

    * 1 Well-formed and valid XML documents
    * 2 Well-formed documents: XML syntax
          o 2.1 Entity references
                + 2.1.1 Numeric character references
          o 2.2 Well-formed documents
          o 2.3 Automatic verification
    * 3 Valid documents: XML semantics
          o 3.1 DTD
          o 3.2 XML Schema
          o 3.3 RELAX NG
          o 3.4 ISO DSDL and Other Schema Languages
          o 3.5 International use
    * 4 Displaying XML on the web
    * 5 XML extensions
    * 6 Processing XML files
          o 6.1 SAX
          o 6.2 DOM
          o 6.3 Transformation engines and filters
          o 6.4 Pull Parsing
          o 6.5 Data binding
          o 6.6 Non-extractive XML Processing API
          o 6.7 Specific XML applications and editors
    * 7 History
          o 7.1 Sources
          o 7.2 Versions
          o 7.3 Patent claims
    * 8 Critique of XML
          o 8.1 Advantages of XML
          o 8.2 Disadvantages of XML
    * 9 See also
    * 10 Notes and references
    * 11 External links
          o 11.1 Specifications
          o 11.2 Parsers
          o 11.3 Sources
          o 11.4 Retrospectives
          o 11.5 Papers

[edit] Well-formed and valid XML documents

There are two levels of correctness of an XML document:

    * Well-formed. A well-formed document conforms to all of XML's syntax rules. For example, if an element has an opening tag with no closing tag and is not self-closing, it is not well-formed. A document that is not well-formed is not considered to be XML; a conforming parser is not allowed to process it.
    * Valid. A valid document additionally conforms to some semantic rules. These rules are either user-defined, or included as an XML schema or DTD. For example, if a document contains an undefined tag, then it is not valid; a validating parser is not allowed to process it.

[edit] Well-formed documents: XML syntax

As long as only well-formedness is required, XML is a generic framework for storing any amount of text or any data whose structure can be represented as a tree. The only indispensable syntactical requirement is that the document has exactly one root element (alternatively called the document element). This means that the text must be enclosed between a root opening tag and a corresponding closing tag. The following is a well-formed XML document:

<book>Gallia omnis divisa est in partes tres .... </book>

The root element can be preceded by an optional XML declaration. This element states what version of XML is in use (normally 1.0); it may also contain information about character encoding and external dependencies.

<?xml version="1.0" encoding="UTF-8"?>

The specification requires that processors of XML support the pan-Unicode character encodings UTF-8 and UTF-16 (UTF-32 is not mandatory). The use of more limited encodings, such as those based on ISO/IEC 8859, is acknowledged and is widely used and supported.

Comments can be placed anywhere in the tree, including in the text if the content of the element is text or #PCDATA:

<!-- This is a comment. -->

In any meaningful application, additional markup is used to structure the contents of the XML document. The text enclosed by the root tags may contain an arbitrary number of XML elements. The basic syntax for one element is:

<name attribute="value">content</name>

Here, »content« is some text which may again contain XML elements. So, a generic XML document contains a tree-based data structure. In this respect, it is similar to the LISP programming language's S-expressions, which describe tree structures wherein each node may have its own property list. Here is an example of a structured XML document:

<book title="Mécanique" authors="Landau, Lifshitz">
  <chapter title="équations du mouvement">
    <section title="coordonnées généralisées">
       Une des notions fondamentales de la Mécanique est celle de point matériel. ....
    </section>
    <section title="Le principe de moindre action">
       La formule la plus générale de la loi du mouvement des systèmes mécaniques est
       fournie par le principe dit de moindre action (ou principe de Hamilton). ....
    </section>
    ...
  </chapter>
  <chapter title="lois de conservation">
    ...
  </chapter>
  ...
</book>

Attribute values must always be quoted, using single or double quotes, and each attribute name should appear only once in any element. XML requires that elements be properly nested — elements may never overlap. For example, the code below is not well-formed XML, because the em and strong elements overlap:

<!-- WRONG! NOT WELL-FORMED XML! -->
<p>Normal <em>emphasized <strong>strong emphasized</em> strong</strong></p>

XML provides special syntax for representing an element with empty content. Instead of writing a start tag followed immediately by an end tag, a document may contain an empty-element tag. An empty-element tag resembles a start tag but contains a slash just before the closing angle bracket. The following three examples are equivalent in XML:

<foo></foo>
<foo />
<foo/>

An empty-element tag may contain attributes:

<info author="John" genre="science-fiction" date="2009-Jan-01" />

